// Generated by CoffeeScript 1.8.0
(function() {
  var Block, Editor, HR, Helper, KeyBoardHelper, PixImage, PullQuote, Quote, SourceCodeBlock, TextBlock, VideoFileLink,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Helper = (function() {
    function Helper() {}

    Helper.prototype._is_title = function($dom) {
      var dom;
      dom = $dom[0];
      return dom.tagName === 'H1' || dom.tagName === 'H2' || dom.tagName === 'H3' || dom.tagName === 'H4' || dom.tagName === 'H5' || dom.tagName === 'H6';
    };

    Helper.prototype._is_list = function($dom) {
      var dom;
      dom = $dom[0];
      return dom.tagName === 'OL' || dom.tagName === 'UL';
    };

    Helper.prototype._enter_img = function($dom) {
      return this._add_new_block($dom);
    };

    Helper.prototype._enter_hr = function($dom) {
      return this._add_new_block($dom);
    };

    Helper.prototype._enter_quote = function($dom) {
      return this._add_new_block($dom);
    };

    Helper.prototype._remove_last_li = function($lis) {
      var $last, _results;
      _results = [];
      while (this._is_empty($lis.last())) {
        $last = $lis.last();
        $lis = $lis.not($last);
        if (!$lis[0]) {
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Helper.prototype._each_dom_br = function($dom) {
      var $br, $node, $this, dom, l, node;
      $this = this;
      $br = $('');
      dom = $dom[0];
      if (dom.nodeType === 1) {
        if (dom.hasChildNodes()) {
          l = dom.childNodes.length - 1;
          while (l >= 0) {
            node = dom.childNodes[l];
            l = l - 1;
            $node = $(node);
            $br = $br.add($this._each_dom_br($node));
            if (!$this._is_empty($node)) {
              break;
            }
          }
        } else if (dom.tagName === 'BR') {
          $br = $br.add($dom);
        }
      }
      return $br;
    };

    Helper.prototype._get_first_text_node = function(dom) {
      var node;
      if (dom.nodeType === 3 || this._is_empty($(dom))) {
        node = dom;
      } else {
        node = this._get_first_text_node(dom.childNodes[0]);
      }
      return node;
    };

    Helper.prototype._get_last_text_node = function(dom) {
      var node;
      if (dom.nodeType === 3 || this._is_empty($(dom))) {
        node = dom;
      } else {
        node = this._get_last_text_node(dom.childNodes[dom.childNodes.length - 1]);
      }
      return node;
    };

    Helper.prototype._is_empty = function($dom) {
      return !($dom.text().replace(/\s/ig, '').length);
    };

    Helper.prototype._remove_empty_div = function($text) {
      var $div;
      $div = $text.find('div');
      return $div.each(function(i, div) {
        if (!div.hasChildNodes()) {
          return $(div).remove();
        }
      });
    };

    Helper.prototype._menu_check = function() {
      var $menus, show;
      $menus = $('.pen-menu');
      show = false;
      $menus.each(function(i, menu) {
        var $menu;
        $menu = $(menu);
        if ($menu.css('display') === 'block') {
          return show = true;
        }
      });
      return show;
    };

    Helper.prototype._nav_check = function(o_block) {
      return o_block.$area_nav.hasClass('open') || o_block.$block_nav.hasClass('open');
    };

    Helper.prototype._get_selection = function() {
      var oSelect;
      oSelect = window.getSelection();
      if (oSelect.rangeCount <= 1) {
        return oSelect;
      } else {
        console.log('range count is many, please reselect');
        return false;
      }
    };

    Helper.prototype._create_tid_str = function() {
      var lor;
      lor = '';
      while (lor.length < 6) {
        lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)];
      }
      return lor;
    };

    Helper.prototype._create_tid = function() {
      var str;
      str = '';
      while (!this._valid_tid(str)) {
        str = this._create_tid_str();
      }
      return str;
    };

    Helper.prototype._valid_tid = function(tid) {
      return tid.length === 6 && this._get_tid_index(tid) < 0;
    };

    Helper.prototype._get_tid_index = function(tid) {
      return $.inArray(tid, this.tid_arr);
    };

    return Helper;

  })();

  KeyBoardHelper = (function(_super) {
    __extends(KeyBoardHelper, _super);

    function KeyBoardHelper() {
      return KeyBoardHelper.__super__.constructor.apply(this, arguments);
    }

    KeyBoardHelper.prototype._text_key_delete = function(o_block) {
      if (this._is_empty(o_block.$text)) {
        this._destroy_block(o_block);
        return false;
      }
    };

    KeyBoardHelper.prototype._text_key_up = function(o_block) {
      var $prev, $text, anchor, base, first_node, oSelect;
      $text = o_block.$text;
      oSelect = this._get_selection();
      if (oSelect) {
        anchor = oSelect.anchorNode;
        first_node = this._get_first_text_node($text[0]);
        if (this._is_empty($(first_node))) {
          first_node = this._get_first_text_node($text.children().first()[0]);
        }
        $prev = this._get_prev_blcok(o_block.$block);
        base = oSelect.baseOffset;
        if ((oSelect.anchorOffset === base || oSelect.anchorOffset === 0) && first_node === anchor) {
          if ($prev.length) {
            return this._active_block($prev.data('block'));
          }
        }
      }
    };

    KeyBoardHelper.prototype._text_key_down = function(o_block) {
      var $next, $text, base, focus, last_node, oSelect;
      $text = o_block.$text;
      oSelect = this._get_selection();
      if (oSelect) {
        focus = oSelect.focusNode;
        last_node = this._get_last_text_node($text[0]);
        if (this._is_empty($(last_node))) {
          last_node = this._get_last_text_node($text.children().last()[0]);
        }
        $next = this._get_next_block(o_block.$block);
        base = oSelect.baseOffset;
        if (last_node === focus && (oSelect.focusOffset === focus.textContent.length || base === oSelect.focusOffset)) {
          if ($next.length) {
            return this._active_block($next.data('block'));
          }
        }
      }
    };

    KeyBoardHelper.prototype._text_key_enter = function(o_block) {
      if (this._is_list(o_block.$text)) {
        return this._enter_list(o_block);
      } else {
        return this._enter_block(o_block);
      }
    };

    KeyBoardHelper.prototype._enter_block = function(o_block) {
      var $br, $br_moz, $dom, num, p_length;
      $dom = o_block.$text;
      $br = this._each_dom_br($dom);
      $br_moz = $br.filter("[type='_moz']");
      p_length = $dom.find('p, div').length;
      num = $br.length;
      if (this._is_empty($dom) || $br_moz.length) {
        num -= 1;
      }
      if (num >= 1) {
        $br.remove();
        $br_moz.remove();
        return this._add_empty_block(o_block);
      }
    };

    KeyBoardHelper.prototype._enter_list = function(o_block) {
      var $dom, $last, $last_2, $lis, l;
      $dom = o_block.$text;
      $lis = $dom.find('li');
      l = $lis.length;
      if (l > 2) {
        $last = $($lis[l - 1]);
        $last_2 = $($lis[l - 2]);
        if (this._is_empty($last) && this._is_empty($last_2)) {
          $last.remove();
          $last_2.remove();
          return this._add_empty_block(o_block);
        }
      }
    };

    KeyBoardHelper.prototype._hr_key_delete = function(o_block) {
      return this._destroy_block(o_block);
    };

    KeyBoardHelper.prototype._hr_key_up = function(o_block) {
      var $prev;
      $prev = this._get_prev_blcok(o_block.$block);
      if ($prev.length) {
        return this._active_block($prev.data('block'));
      }
    };

    KeyBoardHelper.prototype._hr_key_down = function(o_block) {
      var $next;
      $next = this._get_next_block(o_block.$block);
      if ($next.length) {
        return this._active_block($next.data('block'));
      }
    };

    KeyBoardHelper.prototype._hr_key_enter = function(o_block) {
      this._add_empty_block(o_block);
      return false;
    };

    KeyBoardHelper.prototype._img_key_up = function(o_block) {
      var $prev;
      $prev = this._get_prev_blcok(o_block.$block);
      if ($prev.length) {
        return this._active_block($prev.data('block'));
      }
    };

    KeyBoardHelper.prototype._img_key_down = function(o_block) {
      var $next;
      $next = this._get_next_block(o_block.$block);
      if ($next.length) {
        return this._active_block($next.data('block'));
      }
    };

    KeyBoardHelper.prototype._img_key_delete = function(o_block) {
      return this._destroy_block(o_block);
    };

    KeyBoardHelper.prototype._img_key_enter = function(o_block) {
      this._add_empty_block(o_block);
      return false;
    };

    KeyBoardHelper.prototype._quote_key_delete = function(o_block) {
      this._destroy_block(o_block);
      return false;
    };

    KeyBoardHelper.prototype._quote_key_up = function(o_block) {
      var $prev;
      $prev = this._get_prev_blcok(o_block.$block);
      if ($prev.length) {
        return this._active_block($prev.data('block'));
      }
    };

    KeyBoardHelper.prototype._quote_key_down = function(o_block) {
      var $next;
      $next = this._get_next_block(o_block.$block);
      if ($next.length) {
        return this._active_block($next.data('block'));
      }
    };

    KeyBoardHelper.prototype._quote_key_enter = function(o_block) {
      this._add_empty_block(o_block);
      return false;
    };

    KeyBoardHelper.prototype._code_is_word = function(code) {
      if (code >= 65 && code <= 90) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_number = function(code) {
      if (code >= 48 && code <= 57) {
        true;
      }
      if (code >= 96 && code <= 105) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_fn = function(code) {
      if (code >= 112 && code <= 123) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_del = function(code) {
      if (code === 8 || code === 46) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_direction = function(code) {
      if (code >= 37 && code <= 40) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_enter = function(code) {
      if (code === 13) {
        return true;
      }
    };

    KeyBoardHelper.prototype._code_is_blank = function() {};

    KeyBoardHelper.prototype._code_is_punctuation = function() {};

    KeyBoardHelper.prototype._code_is_operator = function() {};

    KeyBoardHelper.prototype._enable_input = function($text) {
      var $this;
      $this = this;
      return $text.keydown(function(e) {
        if (!($this._code_is_direction(e.keyCode) || $this._code_is_fn(e.keyCode))) {
          return false;
        }
      });
    };

    KeyBoardHelper.prototype._get_near_block = function($block) {
      var $next, $prev;
      $prev = this._get_prev_blcok($block);
      $next = this._get_next_block($block);
      return $prev.add($next).first();
    };

    KeyBoardHelper.prototype._get_prev_blcok = function($block) {
      return $block.prevAll(this.options.editorSelect).first();
    };

    KeyBoardHelper.prototype._get_next_block = function($block) {
      return $block.nextAll(this.options.editorSelect).first();
    };

    return KeyBoardHelper;

  })(Helper);

  Block = (function(_super) {
    __extends(Block, _super);

    function Block($base, options) {
      this.$block = $base.addClass('pen');
      this.options = options;
      this.label = this.$block.data('label');
      this.$text = this.$block.find('> .text').addClass('pen');
      this.tid = this.$block.attr('id');
      this.owner_id = this.$block.data('owner');
      this.type = $base.data('type');
    }

    Block.prototype._inactive = function() {
      return this.$block.removeClass('editing');
    };

    Block.prototype._active = function() {
      return this.$block.addClass('editing');
    };

    Block.prototype._destroy = function() {};

    Block.prototype._get_data = function() {
      return {};
    };

    Block.prototype._init_block_edit_nav = function() {
      this.$block_edit_nav = $("<div class='block_edit'></div>");
      if (!this.owner_id) {
        return this.$block_edit_nav.prependTo(this.$block);
      }
    };

    Block.prototype._init_del_nav = function() {
      this.$block_del_nav = $("<div class='block_del'></div>");
      return this.$block_del_nav.prependTo(this.$block);
    };

    return Block;

  })(KeyBoardHelper);

  PixImage = (function(_super) {
    __extends(PixImage, _super);

    function PixImage($base, options) {
      PixImage.__super__.constructor.call(this, $base, options);
      this.$img = this.$block.find('img');
      this.style = this.$block.data('style');
      this.$description = this.$block.find('.description');
      this.src = this.$img.parent().data('src');
      this._init();
    }

    PixImage.prototype._init = function() {
      this._init_pen_nav();
      this._init_block_edit_nav();
      return this._init_del_nav();
    };

    PixImage.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        img_sid: this.$text.attr('id'),
        _type: 'PixImage',
        style: this.style,
        url: this.src,
        description: this.$description.text()
      };
    };

    PixImage.prototype._active_pen_nav = function() {
      this.$pen_nav.find('i').removeClass('active');
      return this.$pen_nav.find('i[data-action=' + this.style + ']').addClass('active');
    };

    PixImage.prototype._init_pen_nav = function() {
      if (!this.owner_id) {
        this.$pen_nav = $('<div class="image_menu pen-menu pen-menu pen-nav"> <i class="pen-icon icon-left" data-action="left"></i> <i class="pen-icon icon-center" data-action="center"></i> <i class="pen-icon icon-full" data-action="full"></i> </div>');
        this.$pen_nav.prependTo(this.$block);
        this._active_pen_nav();
      }
      this.$text.attr('contenteditable', 'true');
      return document.execCommand("enableObjectResizing", false, false);
    };

    PixImage.prototype._destroy_pen = function() {
      if (this.o_pen) {
        return this.o_pen.destroy();
      }
    };

    PixImage.prototype._change_type = function(type) {
      var obj;
      this.style = type;
      this.$block.attr('data-style', type);
      this._active_pen_nav();
      obj = $('body').data('lazing');
      if (obj) {
        return obj._init_style();
      }
    };

    return PixImage;

  })(Block);

  Quote = (function(_super) {
    __extends(Quote, _super);

    function Quote($base, options) {
      Quote.__super__.constructor.call(this, $base, options);
      this.$body = this.$text.find('.text_content');
      this.$source_link = this.$block.find('.ll');
      this._init();
    }

    Quote.prototype._init = function() {
      this._init_block_edit_nav();
      this._init_del_nav();
      return this.$text.attr('contenteditable', 'true');
    };

    Quote.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: this.type,
        body: this.$body.text().replace(/\s+/ig, ' '),
        data_bg: this.$block.find('blockquote').data('bg'),
        web_link: {
          html: this.$source_link.html(),
          url: this.$source_link.attr('href'),
          title: this.$source_link.find('.link_label').text()
        }
      };
    };

    return Quote;

  })(Block);

  TextBlock = (function(_super) {
    __extends(TextBlock, _super);

    function TextBlock($base, options) {
      TextBlock.__super__.constructor.call(this, $base, options);
      this.block_type = this.$block.data('block-type').toUpperCase();
      this._init();
    }

    TextBlock.prototype._init = function() {
      this._init_text();
      this._init_area_nav();
      this._init_block_nav();
      this._inactive();
      return this._bind_placeholder();
    };

    TextBlock.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: this.block_type,
        text: this.$text.html()
      };
    };

    TextBlock.prototype._bind_placeholder = function() {
      if (this._is_title(this.$text)) {
        return this.$text.cea_placeholder();
      }
    };

    TextBlock.prototype._init_text = function() {
      if (!this.$text.length) {
        this.$block.wrapInner("<p class='pen text'></p>");
      }
      return this._init_pen();
    };

    TextBlock.prototype._init_block_nav = function() {
      var $li, $this, type, _i, _len, _ref;
      this.$block_nav = $("<div class='dropdown block_nav' contenteditable='false'> <a class='selected create tag' data-toggle='dropdown' aria-haspopup='true' role='button' aria-expanded='false' data-target='#'>P</a> <ul class='dropdown-menu tags' role='menu'> </ul> </div>").appendTo(this.$block);
      this.$block_ul = this.$block_nav.find('ul.tags');
      $this = this;
      _ref = $this.options.blockList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        $li = $("<li><a class='tag' href='javascript:void(0)'></a></li>");
        $li.find('a').addClass(type).text(type).attr('data-action', type);
        $li.appendTo($this.$block_ul);
      }
      return this.$block_nav.appendTo($this.$block);
    };

    TextBlock.prototype._init_area_nav = function() {
      var $li, $this, type, _i, _len, _ref;
      this.$area_nav = $("<div class='dropdown area_nav' contenteditable='false'> <a class='selected tag' data-toggle='dropdown' aria-haspopup='true' role='button' aria-expanded='false' data-target='#'>P</a> <ul class='dropdown-menu tags' role='menu'> </ul> </div>").appendTo(this.$block);
      this.$ul = this.$area_nav.find('ul.tags');
      this.$selected = this.$area_nav.find('.selected');
      $this = this;
      _ref = $this.options.areaList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        $li = $("<li><a class='tag' href='javascript:void(0)'></a></li>");
        $li.find('a').addClass(type).text(type).attr('data-action', type);
        $li.appendTo($this.$ul);
        if (type === $this.block_type) {
          $this.$selected.addClass(type).text(type);
          $li.addClass('active');
        }
      }
      return this.$area_nav.appendTo($this.$block);
    };

    TextBlock.prototype._init_pen = function() {
      if (this._is_title(this.$text)) {
        return this.$text.attr('contenteditable', '').addClass('pen');
      } else {
        return this.o_pen = new Pen($.extend(true, {
          list: this.options.text_list,
          editor: this.$text[0]
        }, this.options));
      }
    };

    TextBlock.prototype._set_placeholder = function($text) {
      if ($text.text().replace(/\s/ig, '').length) {
        return $text.removeClass('pen-placeholder');
      } else {
        console.log('addd');
        return $text.addClass('pen-placeholder');
      }
    };

    TextBlock.prototype._destroy_pen = function() {
      if (this.o_pen) {
        this.o_pen.destroy();
        this.$text.attr('contenteditable', '').addClass('pen');
      }
      return this._set_placeholder(this.$text);
    };

    TextBlock.prototype._inactive = function() {
      TextBlock.__super__._inactive.call(this);
      this._destroy_pen();
      this.$area_nav.hide();
      return this.$block_nav.hide();
    };

    TextBlock.prototype._active = function() {
      var $this, range, sel;
      $this = this;
      TextBlock.__super__._active.call(this);
      this._init_nav();
      this._rebuid_pen();
      this._remove_empty_div(this.$text);
      sel = window.getSelection();
      range = document.createRange();
      range.setStartBefore($this.$text[0]);
      range.collapse(true);
      sel.removeAllRanges();
      return sel.addRange(range);
    };

    TextBlock.prototype._active_area_nav = function() {
      this.$block_nav.hide();
      return this.$area_nav.show();
    };

    TextBlock.prototype._active_block_nav = function() {
      this.$block_nav.show();
      return this.$area_nav.hide();
    };

    TextBlock.prototype._rebuid_pen = function() {
      if (this.o_pen) {
        return this.o_pen.rebuild();
      }
    };

    TextBlock.prototype._init_nav = function() {
      if (this._is_empty(this.$text)) {
        return this._active_block_nav();
      } else {
        return this._active_area_nav();
      }
    };

    TextBlock.prototype._destroy = function() {
      return this.$block.remove();
    };

    TextBlock.prototype._update_area_nav = function() {
      this.$click = this.$ul.find("li a." + this.block_type).parents('li');
      this.$selected.attr('class', 'tag selected').addClass(this.block_type).text(this.block_type);
      this.$ul.find('li').removeClass('active');
      return this.$click.addClass('active');
    };

    TextBlock.prototype._change_type = function(new_type) {
      if (new_type !== this.block_type) {
        this.block_type = new_type;
        this.$block.attr('data-block-type', new_type);
        this._update_area_nav();
        this._inactive();
        this._init_nav();
        this._simple_update_$text(new_type);
        this._init_pen();
        return this._set_placeholder(this.$text);
      }
    };

    TextBlock.prototype._simple_update_$text = function(new_type) {
      var $tmp_text;
      $tmp_text = this.$text;
      switch (this.block_type) {
        case 'UL':
          this.$text = $("<ul></ul>");
          break;
        case 'OL':
          this.$text = $("<ol></ol>");
          break;
        case 'H3':
          this.$text = $("<h3></h3>");
          break;
        case 'H4':
          this.$text = $("<h4></h4>");
          break;
        case 'H5':
          this.$text = $("<h5></h5>");
          break;
        case 'CP':
          this.$text = $("<p class='text_center'></p>");
          break;
        case 'RP':
          this.$text = $("<p class='text_right'></p>");
          break;
        default:
          this.$text = $("<p></p>");
      }
      this.$text.append($tmp_text.html()).addClass('text').addClass('pen-placeholder').attr('data-placeholder', $tmp_text.attr('data-placeholder'));
      return this._simple_update_text_content(this.$text).replaceAll($tmp_text);
    };

    TextBlock.prototype._simple_update_text_content = function($text) {
      if (this._is_title($text)) {
        this._simple_update_title_text($text);
      } else if (this._is_list($text)) {
        this._simple_update_list_text($text);
      } else {
        this._simple_update_p_or_quote_text($text);
      }
      return $text;
    };

    TextBlock.prototype._simple_update_p_or_quote_text = function($text) {
      var $lis;
      $lis = $text.find('li');
      if ($lis.length) {
        $text.empty();
        return $lis.each(function(i, li) {
          var $block;
          $block = $('<p></p>').html($(li).html());
          return $block.appendTo($text);
        });
      }
    };

    TextBlock.prototype._simple_update_list_text = function($text) {
      var $_text, $li, $lis, $ps;
      $lis = $text.find('li');
      if (!($lis.length && !this._is_empty($text))) {
        $ps = $text.find('p');
        $_text = $text.clone();
        $text.empty();
        if ($ps.length) {
          return $ps.each(function(i, p) {
            var $li;
            $li = $('<li></li>').html($(p).html());
            return $li.appendTo($text);
          });
        } else {
          $li = $('<li></li>').html($_text.html());
          return $li.appendTo($text);
        }
      }
    };

    TextBlock.prototype._simple_update_title_text = function($text) {
      var $_text, $ps;
      this._simple_update_p_or_quote_text($text);
      $ps = $text.find('p');
      if ($ps.length) {
        return $ps.each(function(i, p) {
          var $_p, $p;
          $p = $(p);
          $_p = $p.clone();
          return $p.empty().text($_p.text());
        });
      } else {
        $_text = $text.clone();
        return $text.empty().text($_text.text());
      }
    };

    return TextBlock;

  })(Block);

  SourceCodeBlock = (function(_super) {
    __extends(SourceCodeBlock, _super);

    function SourceCodeBlock($base, options) {
      SourceCodeBlock.__super__.constructor.call(this, $base, options);
      this.$code = this.$block.find('code');
      this._init();
    }

    SourceCodeBlock.prototype._init = function() {
      this._init_block_edit_nav();
      this._init_del_nav();
      return this.$text.attr('contenteditable', 'true');
    };

    SourceCodeBlock.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: this.type,
        body: this.$code.text(),
        highlight_style: this.$block.data('style'),
        language: this.$code.data('language')
      };
    };

    return SourceCodeBlock;

  })(Block);

  VideoFileLink = (function(_super) {
    __extends(VideoFileLink, _super);

    function VideoFileLink($base, options) {
      VideoFileLink.__super__.constructor.call(this, $base, options);
      this.block_type = this.$block.data('block-type');
      this.$title = this.$block.find('.title');
      this.$lazing_vido = this.$text.children();
      this.$video = this.$block.find('video');
      this._init();
    }

    VideoFileLink.prototype._init = function() {
      this._init_block_edit_nav();
      return this._init_del_nav();
    };

    VideoFileLink.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: this.type,
        html: this.$lazing_vido.data('html'),
        title: this.$title.text()
      };
    };

    return VideoFileLink;

  })(Block);

  HR = (function(_super) {
    __extends(HR, _super);

    function HR($base, options) {
      HR.__super__.constructor.call(this, $base, options);
      this._init();
    }

    HR.prototype._init = function() {
      return this.$text.attr('contenteditable', 'true');
    };

    HR.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: 'HR',
        text: ''
      };
    };

    return HR;

  })(Block);

  PullQuote = (function(_super) {
    __extends(PullQuote, _super);

    function PullQuote($base, options) {
      PullQuote.__super__.constructor.call(this, $base, options);
      this._init();
    }

    PullQuote.prototype._init = function() {
      return this.$text.attr('contenteditable', 'true');
    };

    PullQuote.prototype._get_data = function() {
      return {
        tid: this.$block.attr('id'),
        _type: this.type,
        body: this.$text.text()
      };
    };

    PullQuote.prototype._init_nav = function() {
      return 'noting';
    };

    return PullQuote;

  })(Block);

  Editor = (function(_super) {
    __extends(Editor, _super);

    function Editor($base, options) {
      this.options = options;
      this.$base = $base.addClass('v-editor');
      this.tid_arr = [];
      this.$counts = $('.article_counts');
      this.$submit_button = $(options.submit_button);
      this._init();
      this._init_status();
      this._init_modals();
      this._count_text();
    }

    Editor.prototype._init = function() {
      var $empty_ele, $this;
      $this = this;
      this.$blocks = this.$base.find(this.options.editorSelect);
      if (!this.$blocks.length) {
        $empty_ele = $("<div class='block' data-type='TextBlock' data-block-type='P'><p class='text'></p></div>");
        $empty_ele.appendTo(this.$base);
        this.$blocks = this.$blocks.add($empty_ele);
      }
      this.$blocks.each(function(i, block) {
        return $this._init_ele_block($(block));
      });
      return this.$submit_button.click(function() {
        var body_json;
        body_json = [];
        $this.$blocks = $this.$base.find($this.options.editorSelect);
        $this.$blocks.each(function(i, block) {
          return body_json[i] = $(block).data('block')._get_data();
        });
        console.log(body_json);
        return $.ajax({
          url: $(this).data('href'),
          type: 'post',
          beforeSend: function() {
            return $this._ajax_start();
          },
          data: {
            body: body_json
          },
          success: function(data) {
            $this._ajax_success(data);
            return window.location.href = window.location.href.replace(/\/edit/, '');
          },
          complete: function() {
            return $this._ajax_end();
          },
          error: function(xhr, msg, e) {
            return $this._ajax_error(xhr, msg, e);
          }
        });
      });
    };

    Editor.prototype._init_ele_block = function($block) {
      var $text, $this, o_block;
      $this = this;
      $text = $block.find('>').addClass('text');
      $text.attr('data-placeholder', this.options.placeholder);
      if ($text.is('hr')) {
        $block.attr('data-type', 'HR');
      }
      if (!$block.data('block')) {
        o_block = $this._init_block($block);
        $this._bind_event(o_block);
        return $this.tid_arr.push(o_block._get_data().tid);
      }
    };

    Editor.prototype._init_block = function($block) {
      var $this, o_block, type;
      $this = this;
      type = $block.data('type');
      o_block = eval("new " + type + "($block, $this.options)");
      $block.data('block', o_block);
      return o_block;
    };

    Editor.prototype._bind_event = function(o_block) {
      this._bind_block_same_event(o_block);
      return this._bind_key_board_event(o_block);
    };

    Editor.prototype._bind_block_same_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$block.focusin(function() {
        return $this._active_block(o_block);
      });
      return o_block.$block.focusout(function() {});
    };

    Editor.prototype._bind_key_board_event = function(o_block) {
      switch (o_block.$block.data('type')) {
        case 'PixImage':
          return this._bind_image_event(o_block);
        case 'HR':
          return this._bind_hr_event(o_block);
        case 'Quote':
          return this._bind_quote_event(o_block);
        case 'PullQuote':
          return this._bind_pull_quote_event(o_block);
        case 'SourceCodeBlock':
          return this._bind_source_code_event(o_block);
        case 'VideoFileLink':
          return this._bind_video_event(o_block);
        default:
          return this._bind_text_event(o_block);
      }
    };

    Editor.prototype._inactive_block = function() {
      var o_block;
      if (this.$active_block) {
        o_block = this.$active_block.data('block');
        o_block._inactive();
        this._ajax_update_block(o_block);
        return this.$active_block = false;
      }
    };

    Editor.prototype._force_active_block = function(o_block) {
      this.$active_block = false;
      return this._active_block(o_block);
    };

    Editor.prototype._active_block = function(o_block) {
      if (!o_block.$block.is(this.$active_block)) {
        this._inactive_block();
        this.$active_block = o_block.$block;
        o_block._active();
        return o_block.$block.find('.text').focus();
      }
    };

    Editor.prototype._add_empty_block = function(o_block) {
      var $new_block, o_new_block;
      $new_block = $("<div class='new block' data-type='TextBlock' data-block-type='P'> <div class='p text'></div> </div>");
      o_block.$block.after($new_block);
      o_new_block = this._init_block($new_block);
      this._bind_event(o_new_block);
      return this._active_block(o_new_block);
    };

    Editor.prototype._count_text = function() {
      var $tbs, count;
      $tbs = this.$base.find('[data-type=TextBlock] .text');
      count = 0;
      $tbs.each(function(i, tb) {
        return count += $(tb).text().replace(/\s/ig, '').length;
      });
      return this.$counts.text(count);
    };

    Editor.prototype._rebind_text_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 8:
            return $this._text_key_delete(o_block);
          case 46:
            return $this._text_key_delete(o_block);
          case 38:
            return $this._text_key_up(o_block);
          case 40:
            return $this._text_key_down(o_block);
          default:
            return true;
        }
      });
      return o_block.$text.keyup(function(e) {
        $this._count_text();
        o_block._init_nav();
        switch (e.keyCode) {
          case 13:
            return $this._text_key_enter(o_block);
          default:
            return true;
        }
      });
    };

    Editor.prototype._show_modal = function(obj_modal, $block) {
      var $click;
      $click = obj_modal.$clicks.first();
      $click.data('block', $block);
      return $click.click();
    };

    Editor.prototype._bind_text_event = function(o_block) {
      var $this;
      this._rebind_text_event(o_block);
      $this = this;
      o_block.$area_nav.find('.tags a').click(function() {
        o_block._change_type($(this).text());
        $this._rebind_text_event(o_block);
        return o_block.$block.find('.text').focus();
      });
      o_block.$block.find('.text').click(function() {
        return $(this).focus();
      });
      return o_block.$block_nav.find('li a').click(function() {
        switch ($(this).data('action')) {
          case 'PixImage':
            return $this._show_modal($this.obj_pix_image_modal, o_block.$block);
          case 'HR':
            return $this._change_block_to_HR(o_block);
          case 'Quote':
            return $this._show_modal($this.obj_quote_modal, o_block.$block);
          case 'VideoFileLink':
            return $this._show_modal($this.obj_video_modal, o_block.$block);
          case 'SourceCodeBlock':
            return $this._show_modal($this.obj_source_code_modal, o_block.$block);
          default:
            return console.log($(this).data('action'));
        }
      });
    };

    Editor.prototype._bind_hr_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 8:
            return $this._hr_key_delete(o_block);
          case 46:
            return $this._hr_key_delete(o_block);
          case 38:
            return $this._hr_key_up(o_block);
          case 40:
            return $this._hr_key_down(o_block);
          case 13:
            return $this._hr_key_enter(o_block);
          default:
            return true;
        }
      });
      return this._enable_input(o_block.$text);
    };

    Editor.prototype._bind_quote_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 38:
            return $this._quote_key_up(o_block);
          case 40:
            return $this._quote_key_down(o_block);
          case 13:
            return $this._quote_key_enter(o_block);
          default:
            return true;
        }
      });
      o_block.$block_edit_nav.click(function() {
        var $click;
        $click = $this.obj_quote_modal.$clicks.first();
        $click.data('block', o_block.$block);
        return $click.click();
      });
      o_block.$block_del_nav.click(function() {
        return $this._quote_key_delete(o_block);
      });
      return this._enable_input(o_block.$text);
    };

    Editor.prototype._bind_pull_quote_event = function(o_block) {
      return this._rebind_text_event(o_block);
    };

    Editor.prototype._bind_video_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 38:
            return $this._quote_key_up(o_block);
          case 40:
            return $this._quote_key_down(o_block);
          case 13:
            return $this._quote_key_enter(o_block);
          default:
            return true;
        }
      });
      o_block.$block_edit_nav.click(function() {
        var $click;
        $click = $this.obj_video_modal.$clicks.first();
        $click.data('block', o_block.$block);
        return $click.click();
      });
      o_block.$block_del_nav.click(function() {
        return $this._quote_key_delete(o_block);
      });
      return this._enable_input(o_block.$text);
    };

    Editor.prototype._bind_source_code_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 38:
            return $this._quote_key_up(o_block);
          case 40:
            return $this._quote_key_down(o_block);
          case 13:
            return $this._quote_key_enter(o_block);
          default:
            return true;
        }
      });
      o_block.$block_edit_nav.click(function() {
        var $click;
        $click = $this.obj_source_code_modal.$clicks.first();
        $click.data('block', o_block.$block);
        return $click.click();
      });
      o_block.$block_del_nav.click(function() {
        return $this._quote_key_delete(o_block);
      });
      return this._enable_input(o_block.$text);
    };

    Editor.prototype._bind_image_event = function(o_block) {
      var $this;
      $this = this;
      o_block.$text.keydown(function(e) {
        switch (e.keyCode) {
          case 38:
            return $this._img_key_up(o_block);
          case 40:
            return $this._img_key_down(o_block);
          case 13:
            return $this._img_key_enter(o_block);
          default:
            return true;
        }
      });
      if (o_block.$pen_nav) {
        o_block.$pen_nav.find('i').click(function() {
          o_block._change_type($(this).data('action'));
          $this._inactive_block();
          return $this._active_block(o_block);
        });
      }
      if (o_block.$block_edit_nav) {
        o_block.$block_edit_nav.click(function() {
          return $this._show_modal($this.obj_pix_image_modal, o_block.$block);
        });
      }
      o_block.$block_del_nav.click(function() {
        return $this._img_key_delete(o_block);
      });
      return this._enable_input(o_block.$text);
    };

    Editor.prototype._change_block_to_HR = function(o_block) {
      var $new_block, new_o_block;
      $new_block = $("<div class='block' data-type='HR'> <div class='text'><hr /></div> </div>");
      $new_block.attr('id', o_block.$block.attr('id'));
      o_block.$block.replaceWith($new_block);
      new_o_block = this._init_block($new_block);
      this._bind_event(new_o_block);
      return this._force_active_block(new_o_block);
    };

    Editor.prototype._append_image_block = function($prev, html) {
      var $img_block, $this;
      $this = this;
      $this._inactive_block();
      $img_block = $(html);
      $prev.after($img_block);
      return $('body').lazing_load({
        loadEnd: function() {
          $this._init_block($img_block);
          $this._bind_event($img_block);
          return $this._active_block($img_block);
        }
      });
    };

    Editor.prototype._refresh_text_block = function(o_block, $html) {
      return o_block.$block.attr('id', $html.attr('id'));
    };

    Editor.prototype._ajax_update_block = function(o_block) {
      var $prev, $this, data;
      if ($.inArray(o_block.type, ['TextBlock', 'PullQuote', 'PixImage', 'HR']) >= 0) {
        $this = this;
        data = {};
        data.block = o_block._get_data();
        if (!data.block.tid) {
          $prev = this._get_prev_blcok(o_block.$block);
          data.after = $prev.data('block')._get_data().tid;
        }
        return $.ajax({
          url: $this.options.update_url,
          type: 'post',
          beforeSend: function() {
            return $this._ajax_start();
          },
          data: data,
          success: function(data) {
            $this._ajax_success(data);
            if (data.html && o_block.type === 'TextBlock') {
              return $this._refresh_text_block(o_block, $(data.html));
            }
          },
          complete: function() {
            return $this._ajax_end();
          },
          error: function(xhr, msg, e) {
            return $this._ajax_error(xhr, msg, e);
          }
        });
      }
    };

    Editor.prototype._destroy_block = function(o_block) {
      var $near, near_o_block;
      $near = this._get_near_block(o_block.$block);
      near_o_block = $near.data('block');
      if (near_o_block) {
        return this._ajax_destroy_block(o_block, near_o_block);
      }
    };

    Editor.prototype._destroy_block_dom = function(o_block, near_o_block) {
      this._force_active_block(near_o_block);
      return o_block.$block.remove();
    };

    Editor.prototype._ajax_destroy_block = function(o_block, near_o_block) {
      var $this, tid;
      $this = this;
      tid = o_block._get_data().tid;
      if (tid) {
        return $.ajax({
          url: $this.options.update_url,
          type: 'post',
          beforeSend: function() {
            return $this._ajax_start();
          },
          data: {
            tid: tid,
            remove: true
          },
          success: function(data) {
            $this._ajax_success(data);
            return $this._destroy_block_dom(o_block, near_o_block);
          },
          error: function(xhr, msg, e) {
            return $this._ajax_error(xhr, msg, e);
          },
          complete: function() {
            return $this._ajax_end();
          }
        });
      } else {
        return $this._destroy_block_dom(o_block, near_o_block);
      }
    };

    Editor.prototype._ajax_start = function() {
      this.$status.hide();
      this.$updating.show();
      return this.$message.hide();
    };

    Editor.prototype._ajax_end = function() {
      this.$status.show();
      return this.$updating.hide();
    };

    Editor.prototype._ajax_success = function(data) {
      this.$message.text(data.msg);
      return this.$status_time.text(data.u_at);
    };

    Editor.prototype._ajax_error = function(xhr, msg, e) {
      return this.$message.text(msg).show();
    };

    Editor.prototype._init_status = function() {
      this.$message = $('<div class="msg"></div>').hide();
      this.$updating = $('<div class="updating"></div>').hide();
      this.$status = $(this.options.status_tag).before(this.$message).after(this.$updating);
      return this.$status_time = this.$status.find('.u_at');
    };

    Editor.prototype._init_modals = function() {
      if ($.inArray('PixImage', this.options.blockList) >= 0) {
        this._init_pix_image_modal();
      }
      if ($.inArray('Quote', this.options.blockList) >= 0) {
        this._init_quote_modal();
      }
      if ($.inArray('SourceCodeBlock', this.options.blockList) >= 0) {
        this._init_source_code_modal();
      }
      if ($.inArray('VideoFileLink', this.options.blockList) >= 0) {
        return this._init_video_modal();
      }
    };

    Editor.prototype._init_video_modal = function() {
      var $this;
      this.$video_modal = $(this.options.modals.video_file_link.modal);
      this.obj_video_upload = this.$video_modal.find('.block').video_file_link_upload();
      $this = this;
      $this.obj_video_modal = this.$video_modal.bootstrap_modal({
        clicks: '#create_video_block',
        reset_input: true,
        before: function($click, obj) {
          return $this._before_show_modal($click, obj, $this.obj_video_upload);
        }
      });
      return $this._init_form($this.obj_video_modal);
    };

    Editor.prototype._init_pix_image_modal = function() {
      var $this;
      this.$pix_image_modal = $(this.options.modals.pix_image.modal);
      this.obj_pix_image_upload = $('._form.pix_image').pix_image_upload();
      $this = this;
      $this.obj_pix_image_modal = $this.$pix_image_modal.bootstrap_modal({
        clicks: '#create_pix_image',
        reset_input: true,
        before: function($click, obj) {
          return $this._before_show_modal($click, obj, $this.obj_pix_image_upload);
        }
      });
      return $this._init_form($this.obj_pix_image_modal);
    };

    Editor.prototype._init_quote_modal = function() {
      var $this;
      this.$quote_modal = $(this.options.modals.quote.modal);
      this.obj_quote_upload = $('._form.quote').quote_upload();
      this.obj_web_link_upload = $('._form.web_link').web_link_upload();
      $this = this;
      $this.obj_quote_modal = $this.$quote_modal.bootstrap_modal({
        clicks: '#create_quote',
        reset_input: true,
        before: function($click, obj) {
          $this.obj_quote_upload._reset_content('open');
          $this.obj_web_link_upload._reset_content();
          console.log($this.$quote_modal.find('.web_link.link_bar.text_max_hidden'));
          $this.$quote_modal.find('.web_link.link_bar.text_max_hidden').remove();
          $this.$quote_modal.find('.web_link.link_bar._form').show();
          return $this._before_show_modal($click, obj, $this.obj_quote_upload);
        }
      });
      return $this._init_form($this.obj_quote_modal);
    };

    Editor.prototype._init_source_code_modal = function() {
      var $this;
      this.$source_code_modal = $(this.options.modals.source_code_block.modal);
      this.obj_source_code_upload = this.$source_code_modal.find('.source_code_block').source_code_block_upload();
      $this = this;
      $this.obj_source_code_modal = $this.$source_code_modal.bootstrap_modal({
        clicks: '#create_source_code_block',
        reset_input: true,
        before: function($click, obj) {
          return $this._before_show_modal($click, obj, $this.obj_source_code_upload);
        }
      });
      return $this._init_form($this.obj_source_code_modal);
    };

    Editor.prototype._before_show_modal = function($click, obj_modal, obj_upload) {
      var $block, data, o_block;
      $('[type=submit]').removeAttr('disabled');
      $block = $click.data('block');
      if ($block) {
        obj_modal.$modal.data('block', $block);
        o_block = $block.data('block');
        data = o_block._get_data();
        console.log(data);
        obj_upload._reset_content_form_data(data);
        this._init_modal_block_form_data(data, obj_modal, $block);
        return true;
      } else {
        return false;
      }
    };

    Editor.prototype._init_modal_block_form_data = function(data, obj_modal, $block) {
      var $prev, o_prev_block, prev_data;
      if (data.tid) {
        obj_modal.$old_input.val(data.tid);
        return obj_modal.$after_input.val('');
      } else {
        $prev = this._get_prev_blcok($block);
        o_prev_block = $prev.data('block');
        prev_data = o_prev_block._get_data();
        obj_modal.$old_input.val('');
        return obj_modal.$after_input.val(prev_data.tid);
      }
    };

    Editor.prototype._init_modal_input = function(obj_modal) {
      var $after, $old;
      obj_modal.$form.find('input[name=after]').remove();
      $old = $("<input type='hidden' value='' name='block[tid]'>").appendTo(obj_modal.$form);
      $after = $("<input type='hidden' value='' name='after'>").appendTo(obj_modal.$form);
      obj_modal.$old_input = $old;
      return obj_modal.$after_input = $after;
    };

    Editor.prototype._init_form = function(obj_modal) {
      var $this;
      $this = this;
      $this._init_modal_input(obj_modal);
      return obj_modal.$form.ajaxForm({
        success: function(data) {
          var $block;
          console.log(data);
          $block = obj_modal.$modal.data('block');
          $this._refresh_block($block, data);
          return obj_modal.$modal.modal('hide');
        },
        error: function(xhr, status, desc) {
          obj_modal._reset_modal(false);
          return obj_modal.$form.ajax_errors({
            xhr: xhr
          });
        },
        complete: function() {
          return $('[type=submit]').removeAttr('disabled');
        }
      });
    };

    Editor.prototype._refresh_base_block = function(o_block, $new_block) {
      var new_o_block;
      o_block.$block.replaceWith($new_block);
      new_o_block = this._init_block($new_block);
      this._bind_event(new_o_block);
      return this._force_active_block(new_o_block);
    };

    Editor.prototype._refresh_block = function($block, data) {
      var $new_block, $this, o_block;
      $this = this;
      o_block = $block.data('block');
      $new_block = $(data.html);
      switch (data._type) {
        case 'PixImage':
          return $this._refresh_img_block(o_block, $new_block);
        case 'SourceCodeBlock':
          $this._refresh_base_block(o_block, $new_block);
          return hljs.highlightBlock($new_block.find('code')[0]);
        case 'VideoFileLink':
          $this._refresh_base_block(o_block, $new_block);
          return $('body').lazing_video()._init();
        default:
          return $this._refresh_base_block(o_block, $new_block);
      }
    };

    Editor.prototype._refresh_img_block = function(o_block, $new_block) {
      var $this;
      $this = this;
      o_block.$block.replaceWith($new_block);
      return $new_block.lazing_load({
        loadEnd: function() {
          var new_o_block;
          new_o_block = $this._init_block($new_block);
          $this._bind_event(new_o_block);
          return $this._force_active_block(new_o_block);
        }
      });
    };

    return Editor;

  })(KeyBoardHelper);

  $.fn.v_editor = function(options) {
    var $this, defaults;
    $this = this;
    defaults = {
      editorSelect: '.block',
      placeholder: '请输入文字',
      reload_alert: '文章可能不会保存',
      debug: false,
      stay: true,
      submit_button: '#publish',
      text_list: ['code', 'bold', 'italic', 'createlink'],
      image_list: ['code', 'bold', 'italic'],
      areaList: ['H3', 'H4', 'H5', 'P', 'CP', 'RP', 'OL', 'UL'],
      blockList: ['Quote', 'PixImage', 'HR', 'SourceCodeBlock', 'VideoFileLink'],
      status_tag: '.action_bar .save_time',
      modals: {
        pix_image: {
          modal: '#create_pix_image_modal',
          cache_url: '/ajax/curations/pix_img/cache'
        },
        quote: {
          modal: '#create_quote_modal'
        },
        source_code_block: {
          modal: '#create_source_code_modal'
        },
        video_file_link: {
          modal: '#create_video_modal'
        }
      },
      upload_image: function() {},
      upload_quote: function() {}
    };
    options = $.extend(true, {}, defaults, options);
    if (!$this.data('Editor')) {
      return $this.data('Editor', new Editor($this, options));
    }
  };

}).call(this);
